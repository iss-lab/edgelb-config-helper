// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1Protocol v1 protocol
//
// swagger:model V1Protocol
type V1Protocol string

const (

	// V1ProtocolHTTP captures enum value "HTTP"
	V1ProtocolHTTP V1Protocol = "HTTP"

	// V1ProtocolHTTPS captures enum value "HTTPS"
	V1ProtocolHTTPS V1Protocol = "HTTPS"

	// V1ProtocolTCP captures enum value "TCP"
	V1ProtocolTCP V1Protocol = "TCP"

	// V1ProtocolTLS captures enum value "TLS"
	V1ProtocolTLS V1Protocol = "TLS"
)

// for schema
var v1ProtocolEnum []interface{}

func init() {
	var res []V1Protocol
	if err := json.Unmarshal([]byte(`["HTTP","HTTPS","TCP","TLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ProtocolEnum = append(v1ProtocolEnum, v)
	}
}

func (m V1Protocol) validateV1ProtocolEnum(path, location string, value V1Protocol) error {
	if err := validate.EnumCase(path, location, value, v1ProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 protocol
func (m V1Protocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
