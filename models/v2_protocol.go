// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V2Protocol v2 protocol
//
// swagger:model V2Protocol
type V2Protocol string

const (

	// V2ProtocolHTTP captures enum value "HTTP"
	V2ProtocolHTTP V2Protocol = "HTTP"

	// V2ProtocolHTTPS captures enum value "HTTPS"
	V2ProtocolHTTPS V2Protocol = "HTTPS"

	// V2ProtocolTCP captures enum value "TCP"
	V2ProtocolTCP V2Protocol = "TCP"

	// V2ProtocolTLS captures enum value "TLS"
	V2ProtocolTLS V2Protocol = "TLS"
)

// for schema
var v2ProtocolEnum []interface{}

func init() {
	var res []V2Protocol
	if err := json.Unmarshal([]byte(`["HTTP","HTTPS","TCP","TLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2ProtocolEnum = append(v2ProtocolEnum, v)
	}
}

func (m V2Protocol) validateV2ProtocolEnum(path, location string, value V2Protocol) error {
	if err := validate.EnumCase(path, location, value, v2ProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v2 protocol
func (m V2Protocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV2ProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
