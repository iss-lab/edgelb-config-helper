// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2Endpoint v2 endpoint
//
// swagger:model V2Endpoint
type V2Endpoint struct {

	// Server address override, can be used to specify a cluster internal address such as a VIP.
	Address string `json:"address,omitempty"`

	// all ports
	AllPorts bool `json:"allPorts,omitempty"`

	// check
	Check *V2EndpointCheck `json:"check,omitempty"`

	// Append arbitrary string to add to the end of the "server" directive.
	MiscStr string `json:"miscStr,omitempty"`

	// port
	Port int32 `json:"port,omitempty"`

	// port name
	PortName string `json:"portName,omitempty"`

	// type
	// Enum: [AUTO_IP AGENT_IP CONTAINER_IP ADDRESS]
	Type string `json:"type,omitempty"`
}

func (m *V2Endpoint) UnmarshalJSON(b []byte) error {
	type V2EndpointAlias V2Endpoint
	var t V2EndpointAlias
	if err := json.Unmarshal([]byte("{\"check\":{},\"port\":-1,\"type\":\"AUTO_IP\"}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V2Endpoint(t)
	return nil
}

// Validate validates this v2 endpoint
func (m *V2Endpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Endpoint) validateCheck(formats strfmt.Registry) error {

	if swag.IsZero(m.Check) { // not required
		return nil
	}

	if m.Check != nil {
		if err := m.Check.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("check")
			}
			return err
		}
	}

	return nil
}

var v2EndpointTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTO_IP","AGENT_IP","CONTAINER_IP","ADDRESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2EndpointTypeTypePropEnum = append(v2EndpointTypeTypePropEnum, v)
	}
}

const (

	// V2EndpointTypeAUTOIP captures enum value "AUTO_IP"
	V2EndpointTypeAUTOIP string = "AUTO_IP"

	// V2EndpointTypeAGENTIP captures enum value "AGENT_IP"
	V2EndpointTypeAGENTIP string = "AGENT_IP"

	// V2EndpointTypeCONTAINERIP captures enum value "CONTAINER_IP"
	V2EndpointTypeCONTAINERIP string = "CONTAINER_IP"

	// V2EndpointTypeADDRESS captures enum value "ADDRESS"
	V2EndpointTypeADDRESS string = "ADDRESS"
)

// prop value enum
func (m *V2Endpoint) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v2EndpointTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V2Endpoint) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2Endpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2Endpoint) UnmarshalBinary(b []byte) error {
	var res V2Endpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V2EndpointCheck Enable health checks. These are by default TCP health checks. For more options see "customCheck". These are required for DNS resolution to function properly.
//
// swagger:model V2EndpointCheck
type V2EndpointCheck struct {

	// custom str
	CustomStr string `json:"customStr,omitempty"`

	// enabled
	Enabled *bool `json:"enabled,omitempty"`
}

func (m *V2EndpointCheck) UnmarshalJSON(b []byte) error {
	type V2EndpointCheckAlias V2EndpointCheck
	var t V2EndpointCheckAlias
	if err := json.Unmarshal([]byte("{\"enabled\":true}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V2EndpointCheck(t)
	return nil
}

// Validate validates this v2 endpoint check
func (m *V2EndpointCheck) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2EndpointCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2EndpointCheck) UnmarshalBinary(b []byte) error {
	var res V2EndpointCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
