// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2CloudProviderAwsElbStatus AWS ELB status.
//
// swagger:model V2CloudProviderAwsElbStatus
type V2CloudProviderAwsElbStatus struct {

	// The availability zones in which load balancer nodes locate.
	AvailabilityZones []*V2CloudProviderAwsElbAz `json:"availabilityZones"`

	// ELB DNS names.
	// Min Length: 1
	DNS string `json:"dns,omitempty"`

	// listeners
	Listeners []*V2CloudProviderAwsElbListener `json:"listeners"`

	// Name of the ELB.
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// The state of the load balancer.
	State *V2CloudProviderAwsElbState `json:"state,omitempty"`
}

// Validate validates this v2 cloud provider aws elb status
func (m *V2CloudProviderAwsElbStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListeners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2CloudProviderAwsElbStatus) validateAvailabilityZones(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailabilityZones) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailabilityZones); i++ {
		if swag.IsZero(m.AvailabilityZones[i]) { // not required
			continue
		}

		if m.AvailabilityZones[i] != nil {
			if err := m.AvailabilityZones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availabilityZones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2CloudProviderAwsElbStatus) validateDNS(formats strfmt.Registry) error {

	if swag.IsZero(m.DNS) { // not required
		return nil
	}

	if err := validate.MinLength("dns", "body", string(m.DNS), 1); err != nil {
		return err
	}

	return nil
}

func (m *V2CloudProviderAwsElbStatus) validateListeners(formats strfmt.Registry) error {

	if swag.IsZero(m.Listeners) { // not required
		return nil
	}

	for i := 0; i < len(m.Listeners); i++ {
		if swag.IsZero(m.Listeners[i]) { // not required
			continue
		}

		if m.Listeners[i] != nil {
			if err := m.Listeners[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listeners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2CloudProviderAwsElbStatus) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *V2CloudProviderAwsElbStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2CloudProviderAwsElbStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2CloudProviderAwsElbStatus) UnmarshalBinary(b []byte) error {
	var res V2CloudProviderAwsElbStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
