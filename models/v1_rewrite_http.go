// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1RewriteHTTP v1 rewrite Http
//
// swagger:model V1RewriteHttp
type V1RewriteHTTP struct {

	// Set the host header value
	Host string `json:"host,omitempty"`

	// path
	Path *V1RewriteHTTPPath `json:"path,omitempty"`

	// request
	Request *V1RewriteHTTPRequest `json:"request,omitempty"`

	// response
	Response *V1RewriteHTTPResponse `json:"response,omitempty"`

	// sticky
	Sticky *V1RewriteHTTPSticky `json:"sticky,omitempty"`
}

func (m *V1RewriteHTTP) UnmarshalJSON(b []byte) error {
	type V1RewriteHTTPAlias V1RewriteHTTP
	var t V1RewriteHTTPAlias
	if err := json.Unmarshal([]byte("{\"request\":{},\"response\":{}}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V1RewriteHTTP(t)
	return nil
}

// Validate validates this v1 rewrite Http
func (m *V1RewriteHTTP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSticky(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RewriteHTTP) validatePath(formats strfmt.Registry) error {

	if swag.IsZero(m.Path) { // not required
		return nil
	}

	if m.Path != nil {
		if err := m.Path.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("path")
			}
			return err
		}
	}

	return nil
}

func (m *V1RewriteHTTP) validateRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.Request) { // not required
		return nil
	}

	if m.Request != nil {
		if err := m.Request.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request")
			}
			return err
		}
	}

	return nil
}

func (m *V1RewriteHTTP) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

func (m *V1RewriteHTTP) validateSticky(formats strfmt.Registry) error {

	if swag.IsZero(m.Sticky) { // not required
		return nil
	}

	if m.Sticky != nil {
		if err := m.Sticky.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sticky")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1RewriteHTTP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1RewriteHTTP) UnmarshalBinary(b []byte) error {
	var res V1RewriteHTTP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1RewriteHTTPPath Rewrite the HTTP URL path. Adding a slash to fromPath usually is not necessary.
//
// swagger:model V1RewriteHTTPPath
type V1RewriteHTTPPath struct {

	// from path
	FromPath *string `json:"fromPath,omitempty"`

	// to path
	ToPath *string `json:"toPath,omitempty"`
}

func (m *V1RewriteHTTPPath) UnmarshalJSON(b []byte) error {
	type V1RewriteHTTPPathAlias V1RewriteHTTPPath
	var t V1RewriteHTTPPathAlias
	if err := json.Unmarshal([]byte("{\"fromPath\":\"\",\"toPath\":\"\"}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V1RewriteHTTPPath(t)
	return nil
}

// Validate validates this v1 rewrite HTTP path
func (m *V1RewriteHTTPPath) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1RewriteHTTPPath) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1RewriteHTTPPath) UnmarshalBinary(b []byte) error {
	var res V1RewriteHTTPPath
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1RewriteHTTPSticky Sticky sessions via a cookie.
// To use the default values (recommended), set this field to the empty object.
//
// swagger:model V1RewriteHTTPSticky
type V1RewriteHTTPSticky struct {

	// custom str
	CustomStr string `json:"customStr,omitempty"`

	// enabled
	Enabled *bool `json:"enabled,omitempty"`
}

func (m *V1RewriteHTTPSticky) UnmarshalJSON(b []byte) error {
	type V1RewriteHTTPStickyAlias V1RewriteHTTPSticky
	var t V1RewriteHTTPStickyAlias
	if err := json.Unmarshal([]byte("{\"enabled\":true}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V1RewriteHTTPSticky(t)
	return nil
}

// Validate validates this v1 rewrite HTTP sticky
func (m *V1RewriteHTTPSticky) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1RewriteHTTPSticky) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1RewriteHTTPSticky) UnmarshalBinary(b []byte) error {
	var res V1RewriteHTTPSticky
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
