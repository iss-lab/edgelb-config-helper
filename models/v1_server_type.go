// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ServerType AUTO_IP detects between AGENT_IP and CONTAINER_IP and uses the appropriate value.
// AGENT_IP is for HOST and BRIDGE networking. VIP for l4lb service addresses. CONTAINER_IP is for virtual networks. This is not DNS.
//
// swagger:model V1ServerType
type V1ServerType string

const (

	// V1ServerTypeAUTOIP captures enum value "AUTO_IP"
	V1ServerTypeAUTOIP V1ServerType = "AUTO_IP"

	// V1ServerTypeAGENTIP captures enum value "AGENT_IP"
	V1ServerTypeAGENTIP V1ServerType = "AGENT_IP"

	// V1ServerTypeCONTAINERIP captures enum value "CONTAINER_IP"
	V1ServerTypeCONTAINERIP V1ServerType = "CONTAINER_IP"

	// V1ServerTypeVIP captures enum value "VIP"
	V1ServerTypeVIP V1ServerType = "VIP"
)

// for schema
var v1ServerTypeEnum []interface{}

func init() {
	var res []V1ServerType
	if err := json.Unmarshal([]byte(`["AUTO_IP","AGENT_IP","CONTAINER_IP","VIP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ServerTypeEnum = append(v1ServerTypeEnum, v)
	}
}

func (m V1ServerType) validateV1ServerTypeEnum(path, location string, value V1ServerType) error {
	if err := validate.EnumCase(path, location, value, v1ServerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 server type
func (m V1ServerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ServerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
