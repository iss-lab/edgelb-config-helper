// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Pool The pool contains information on resources that the pool needs. Changes make to this section will relaunch the tasks.
//
// swagger:model V1Pool
type V1Pool struct {

	// Autogenerate a self-signed SSL/TLS certificate. It is not generated by default.
	// It will be written to "$AUTOCERT".
	AutoCertEnabled bool `json:"autoCertificate,omitempty"`

	// The api / schema version of this pool object
	APIVersion APIVersion `json:"apiVersion,omitempty"`

	// Marathon style constraints for load balancer instance placement.
	Constraints *string `json:"constraints,omitempty"`

	// Number of load balancer instances in the pool.
	Count *int32 `json:"count,omitempty"`

	// cpus
	Cpus float64 `json:"cpus,omitempty"`

	// cpus admin overhead
	CpusAdminOverhead float64 `json:"cpusAdminOverhead,omitempty"`

	// Disk size (in MB)
	Disk int32 `json:"disk,omitempty"`

	// Environment variables to pass to tasks.
	// Prefix with "ELB_FILE_" and it will be written to a file. For example, the contents of "ELB_FILE_MYENV" will be written to "$ENVFILE/ELB_FILE_MYENV".
	EnvironmentVariables map[string]string `json:"environmentVariables,omitempty"`

	// haproxy
	Haproxy *V1Haproxy `json:"haproxy,omitempty"`

	// Memory requirements (in MB)
	Mem int32 `json:"mem,omitempty"`

	// Memory requirements (in MB)
	MemAdminOverhead int32 `json:"memAdminOverhead,omitempty"`

	// The pool name.
	// The name contains one or more lowercase letter(`a-z`), digit(`0-9`), or dash(`-`) and  must not begin or end with a dash(`-`). Ex. `my-pool-name`.
	Name string `json:"name,omitempty"`

	// The DC/OS space (sometimes also referred to as a "group").
	// The namespace consists of a series of names separated by slashes. See `name` for the description of valid names.
	Namespace *string `json:"namespace,omitempty"`

	// package name
	PackageName string `json:"packageName,omitempty"`

	// package version
	PackageVersion string `json:"packageVersion,omitempty"`

	// Pool tasks healthcheck grace period (in seconds)
	// Minimum: 1
	PoolHealthcheckGracePeriod int32 `json:"poolHealthcheckGracePeriod,omitempty"`

	// Pool tasks healthcheck interval (in seconds)
	// Minimum: 1
	PoolHealthcheckInterval int32 `json:"poolHealthcheckInterval,omitempty"`

	// Pool tasks healthcheck maximum number of consecutive failures before declaring as unhealthy
	// Minimum: 1
	PoolHealthcheckMaxFail int32 `json:"poolHealthcheckMaxFail,omitempty"`

	// Maximum amount of time that Mesos will wait for the healthcheck container to finish executing
	// Minimum: 2
	PoolHealthcheckTimeout int32 `json:"poolHealthcheckTimeout,omitempty"`

	// Override ports to allocate for each load balancer instance. Defaults to {{haproxy.frontend.objs[].bindPort}} and
	//   {{haproxy.stats.bindPort}}.
	// Use this field to pre-allocate all needed ports with or
	//   without the frontends present. For example: [80, 443, 9090].
	// If the length of the ports array is not zero, only the
	//   ports specified will be allocated by the pool scheduler.
	Ports []int32 `json:"ports"`

	// Mesos role for load balancers. Defaults to "slave_public" so that load balancers will be run on public agents. Use "*" to run load balancers on private agents. Read more about Mesos roles at http://mesos.apache.org/documentation/latest/roles/
	Role string `json:"role,omitempty"`

	// DC/OS secrets.
	Secrets []*V1PoolSecretsItems0 `json:"secrets"`

	// The type of the pool, e.g. whether it is a dynamic one or static one
	// Read Only: true
	Type PoolType `json:"type,omitempty"`

	// Virtual networks to join.
	VirtualNetworks []*V1PoolVirtualNetworksItems0 `json:"virtualNetworks"`
}

func (m *V1Pool) UnmarshalJSON(b []byte) error {
	type V1PoolAlias V1Pool
	var t V1PoolAlias
	if err := json.Unmarshal([]byte("{\"apiVersion\":\"V1\",\"constraints\":\"hostname:UNIQUE\",\"count\":1,\"cpus\":0.9,\"cpusAdminOverhead\":0.1,\"disk\":256,\"haproxy\":{},\"mem\":992,\"memAdminOverhead\":32,\"packageName\":\"edgelb-pool\",\"packageVersion\":\"v1.5.1\",\"poolHealthcheckGracePeriod\":180,\"poolHealthcheckInterval\":12,\"poolHealthcheckMaxFail\":5,\"poolHealthcheckTimeout\":60,\"ports\":[],\"role\":\"slave_public\",\"secrets\":[],\"type\":\"static\",\"virtualNetworks\":[]}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V1Pool(t)
	return nil
}

// Validate validates this v1 pool
func (m *V1Pool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHaproxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolHealthcheckGracePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolHealthcheckInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolHealthcheckMaxFail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolHealthcheckTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecrets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualNetworks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Pool) validateAPIVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.APIVersion) { // not required
		return nil
	}

	if err := m.APIVersion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("apiVersion")
		}
		return err
	}

	return nil
}

func (m *V1Pool) validateHaproxy(formats strfmt.Registry) error {

	if swag.IsZero(m.Haproxy) { // not required
		return nil
	}

	if m.Haproxy != nil {
		if err := m.Haproxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("haproxy")
			}
			return err
		}
	}

	return nil
}

func (m *V1Pool) validatePoolHealthcheckGracePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.PoolHealthcheckGracePeriod) { // not required
		return nil
	}

	if err := validate.MinimumInt("poolHealthcheckGracePeriod", "body", int64(m.PoolHealthcheckGracePeriod), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *V1Pool) validatePoolHealthcheckInterval(formats strfmt.Registry) error {

	if swag.IsZero(m.PoolHealthcheckInterval) { // not required
		return nil
	}

	if err := validate.MinimumInt("poolHealthcheckInterval", "body", int64(m.PoolHealthcheckInterval), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *V1Pool) validatePoolHealthcheckMaxFail(formats strfmt.Registry) error {

	if swag.IsZero(m.PoolHealthcheckMaxFail) { // not required
		return nil
	}

	if err := validate.MinimumInt("poolHealthcheckMaxFail", "body", int64(m.PoolHealthcheckMaxFail), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *V1Pool) validatePoolHealthcheckTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.PoolHealthcheckTimeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("poolHealthcheckTimeout", "body", int64(m.PoolHealthcheckTimeout), 2, false); err != nil {
		return err
	}

	return nil
}

func (m *V1Pool) validateSecrets(formats strfmt.Registry) error {

	if swag.IsZero(m.Secrets) { // not required
		return nil
	}

	for i := 0; i < len(m.Secrets); i++ {
		if swag.IsZero(m.Secrets[i]) { // not required
			continue
		}

		if m.Secrets[i] != nil {
			if err := m.Secrets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secrets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Pool) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *V1Pool) validateVirtualNetworks(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualNetworks) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualNetworks); i++ {
		if swag.IsZero(m.VirtualNetworks[i]) { // not required
			continue
		}

		if m.VirtualNetworks[i] != nil {
			if err := m.VirtualNetworks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualNetworks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Pool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Pool) UnmarshalBinary(b []byte) error {
	var res V1Pool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1PoolSecretsItems0 v1 pool secrets items0
//
// swagger:model V1PoolSecretsItems0
type V1PoolSecretsItems0 struct {

	// File name.
	// The file "myfile" will be found at "$SECRETS/myfile"
	File string `json:"file,omitempty"`

	// Secret name
	Secret string `json:"secret,omitempty"`
}

// Validate validates this v1 pool secrets items0
func (m *V1PoolSecretsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1PoolSecretsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PoolSecretsItems0) UnmarshalBinary(b []byte) error {
	var res V1PoolSecretsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1PoolVirtualNetworksItems0 v1 pool virtual networks items0
//
// swagger:model V1PoolVirtualNetworksItems0
type V1PoolVirtualNetworksItems0 struct {

	// Labels to pass to the virtual network plugin.
	Labels map[string]string `json:"labels,omitempty"`

	// The name of the virtual network to join.
	Name string `json:"name,omitempty"`
}

// Validate validates this v1 pool virtual networks items0
func (m *V1PoolVirtualNetworksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1PoolVirtualNetworksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PoolVirtualNetworksItems0) UnmarshalBinary(b []byte) error {
	var res V1PoolVirtualNetworksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
