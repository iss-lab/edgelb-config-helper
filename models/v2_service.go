// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2Service v2 service
//
// swagger:model V2Service
type V2Service struct {

	// Endpoint address and port selector.
	Endpoint *V2Endpoint `json:"endpoint,omitempty"`

	// marathon
	Marathon *V2ServiceMarathon `json:"marathon,omitempty"`

	// mesos
	Mesos *V2ServiceMesos `json:"mesos,omitempty"`
}

func (m *V2Service) UnmarshalJSON(b []byte) error {
	type V2ServiceAlias V2Service
	var t V2ServiceAlias
	if err := json.Unmarshal([]byte("{\"endpoint\":{},\"marathon\":{},\"mesos\":{}}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V2Service(t)
	return nil
}

// Validate validates this v2 service
func (m *V2Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarathon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMesos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Service) validateEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoint) { // not required
		return nil
	}

	if m.Endpoint != nil {
		if err := m.Endpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *V2Service) validateMarathon(formats strfmt.Registry) error {

	if swag.IsZero(m.Marathon) { // not required
		return nil
	}

	if m.Marathon != nil {
		if err := m.Marathon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marathon")
			}
			return err
		}
	}

	return nil
}

func (m *V2Service) validateMesos(formats strfmt.Registry) error {

	if swag.IsZero(m.Mesos) { // not required
		return nil
	}

	if m.Mesos != nil {
		if err := m.Mesos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mesos")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2Service) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2Service) UnmarshalBinary(b []byte) error {
	var res V2Service
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V2ServiceMarathon v2 service marathon
//
// swagger:model V2ServiceMarathon
type V2ServiceMarathon struct {

	// Marathon pod container name, optional unless using Marathon pods.
	ContainerName string `json:"containerName,omitempty"`

	// container name pattern
	ContainerNamePattern string `json:"containerNamePattern,omitempty"`

	// Marathon pod or application ID.
	ServiceID string `json:"serviceID,omitempty"`

	// service ID pattern
	ServiceIDPattern string `json:"serviceIDPattern,omitempty"`
}

// Validate validates this v2 service marathon
func (m *V2ServiceMarathon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2ServiceMarathon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2ServiceMarathon) UnmarshalBinary(b []byte) error {
	var res V2ServiceMarathon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V2ServiceMesos v2 service mesos
//
// swagger:model V2ServiceMesos
type V2ServiceMesos struct {

	// Mesos framework ID.
	FrameworkID string `json:"frameworkID,omitempty"`

	// framework ID pattern
	FrameworkIDPattern string `json:"frameworkIDPattern,omitempty"`

	// Mesos framework name.
	FrameworkName string `json:"frameworkName,omitempty"`

	// framework name pattern
	FrameworkNamePattern string `json:"frameworkNamePattern,omitempty"`

	// Mesos task ID.
	TaskID string `json:"taskID,omitempty"`

	// task ID pattern
	TaskIDPattern string `json:"taskIDPattern,omitempty"`

	// Mesos task name.
	TaskName string `json:"taskName,omitempty"`

	// task name pattern
	TaskNamePattern string `json:"taskNamePattern,omitempty"`
}

// Validate validates this v2 service mesos
func (m *V2ServiceMesos) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2ServiceMesos) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2ServiceMesos) UnmarshalBinary(b []byte) error {
	var res V2ServiceMesos
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
