// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2PoolMetadataFrontendEndpoint v2 pool metadata frontend endpoint
//
// swagger:model V2PoolMetadataFrontendEndpoint
type V2PoolMetadataFrontendEndpoint struct {

	// port
	// Maximum: 65535
	// Minimum: 0
	Port *int32 `json:"port,omitempty"`

	// Array of private IP addresses.
	Private []string `json:"private"`

	// Array of public IP addresses.
	Public []string `json:"public"`
}

// Validate validates this v2 pool metadata frontend endpoint
func (m *V2PoolMetadataFrontendEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2PoolMetadataFrontendEndpoint) validatePort(formats strfmt.Registry) error {

	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", int64(*m.Port), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(*m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *V2PoolMetadataFrontendEndpoint) validatePrivate(formats strfmt.Registry) error {

	if swag.IsZero(m.Private) { // not required
		return nil
	}

	for i := 0; i < len(m.Private); i++ {

		if err := validate.MinLength("private"+"."+strconv.Itoa(i), "body", string(m.Private[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *V2PoolMetadataFrontendEndpoint) validatePublic(formats strfmt.Registry) error {

	if swag.IsZero(m.Public) { // not required
		return nil
	}

	for i := 0; i < len(m.Public); i++ {

		if err := validate.MinLength("public"+"."+strconv.Itoa(i), "body", string(m.Public[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2PoolMetadataFrontendEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2PoolMetadataFrontendEndpoint) UnmarshalBinary(b []byte) error {
	var res V2PoolMetadataFrontendEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
