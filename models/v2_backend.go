// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2Backend v2 backend
//
// swagger:model V2Backend
type V2Backend struct {

	// Load balancing strategy. e.g. roundrobin, leastconn, etc.
	Balance string `json:"balance,omitempty"`

	// custom check
	CustomCheck *V2BackendCustomCheck `json:"customCheck,omitempty"`

	// Additional template lines inserted before servers
	MiscStrs []string `json:"miscStrs"`

	// This is name that frontends refer to.
	Name string `json:"name,omitempty"`

	// The backend protocol is how HAProxy communicates with the servers it's load balancing.
	Protocol V2Protocol `json:"protocol,omitempty"`

	// Manipulate HTTP headers. There is no effect unless the protocol is either HTTP or HTTPS.
	RewriteHTTP *V2RewriteHTTP `json:"rewriteHttp,omitempty"`

	// Array of backend service selectors.
	Services []*V2Service `json:"services"`
}

func (m *V2Backend) UnmarshalJSON(b []byte) error {
	type V2BackendAlias V2Backend
	var t V2BackendAlias
	if err := json.Unmarshal([]byte("{\"balance\":\"roundrobin\",\"miscStrs\":[],\"rewriteHttp\":{},\"services\":[]}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V2Backend(t)
	return nil
}

// Validate validates this v2 backend
func (m *V2Backend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewriteHTTP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Backend) validateCustomCheck(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomCheck) { // not required
		return nil
	}

	if m.CustomCheck != nil {
		if err := m.CustomCheck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customCheck")
			}
			return err
		}
	}

	return nil
}

func (m *V2Backend) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		}
		return err
	}

	return nil
}

func (m *V2Backend) validateRewriteHTTP(formats strfmt.Registry) error {

	if swag.IsZero(m.RewriteHTTP) { // not required
		return nil
	}

	if m.RewriteHTTP != nil {
		if err := m.RewriteHTTP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rewriteHttp")
			}
			return err
		}
	}

	return nil
}

func (m *V2Backend) validateServices(formats strfmt.Registry) error {

	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2Backend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2Backend) UnmarshalBinary(b []byte) error {
	var res V2Backend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V2BackendCustomCheck This is used to specify alternate forms of healthchecks
//
// swagger:model V2BackendCustomCheck
type V2BackendCustomCheck struct {

	// httpchk
	Httpchk bool `json:"httpchk,omitempty"`

	// httpchk misc str
	HttpchkMiscStr string `json:"httpchkMiscStr,omitempty"`

	// misc str
	MiscStr string `json:"miscStr,omitempty"`

	// ssl hello chk
	SslHelloChk bool `json:"sslHelloChk,omitempty"`
}

// Validate validates this v2 backend custom check
func (m *V2BackendCustomCheck) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2BackendCustomCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2BackendCustomCheck) UnmarshalBinary(b []byte) error {
	var res V2BackendCustomCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
