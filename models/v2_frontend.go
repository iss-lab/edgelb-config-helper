// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2Frontend The Frontend maps to the HAProxy frontend. This includes information such as what addresses and ports to listen on, what SSL/TLS certificates to use, and which backends to route to.
//
// swagger:model V2Frontend
type V2Frontend struct {

	// Only use characters that are allowed in the frontend name. Known invalid frontend name characters include "*", "[", and "]".
	BindAddress string `json:"bindAddress,omitempty"`

	// Additional text to put in the bind field
	BindModifier string `json:"bindModifier,omitempty"`

	// The port (e.g. 80 for HTTP or 443 for HTTPS) that this frontend will bind to.
	// Maximum: 65535
	// Minimum: 0
	BindPort *int32 `json:"bindPort,omitempty"`

	// certificates
	Certificates []string `json:"certificates"`

	// link backend
	LinkBackend *V2FrontendLinkBackend `json:"linkBackend,omitempty"`

	// Additional template lines inserted before use_backend
	MiscStrs []string `json:"miscStrs"`

	// Defaults to frontend_{{bindAddress}}_{{bindPort}}.
	// Pattern: ^[a-zA-Z0-9:_.-]*$
	Name string `json:"name,omitempty"`

	// The frontend protocol is how clients/users communicate with HAProxy.
	Protocol V2Protocol `json:"protocol,omitempty"`

	// redirect to Https
	RedirectToHTTPS *V2FrontendRedirectToHTTPS `json:"redirectToHttps,omitempty"`
}

func (m *V2Frontend) UnmarshalJSON(b []byte) error {
	type V2FrontendAlias V2Frontend
	var t V2FrontendAlias
	if err := json.Unmarshal([]byte("{\"bindAddress\":\"0.0.0.0\",\"bindPort\":0,\"certificates\":[],\"linkBackend\":{},\"miscStrs\":[]}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V2Frontend(t)
	return nil
}

// Validate validates this v2 frontend
func (m *V2Frontend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBindPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkBackend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectToHTTPS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Frontend) validateBindPort(formats strfmt.Registry) error {

	if swag.IsZero(m.BindPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("bindPort", "body", int64(*m.BindPort), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("bindPort", "body", int64(*m.BindPort), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *V2Frontend) validateLinkBackend(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkBackend) { // not required
		return nil
	}

	if m.LinkBackend != nil {
		if err := m.LinkBackend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linkBackend")
			}
			return err
		}
	}

	return nil
}

func (m *V2Frontend) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[a-zA-Z0-9:_.-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *V2Frontend) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		}
		return err
	}

	return nil
}

func (m *V2Frontend) validateRedirectToHTTPS(formats strfmt.Registry) error {

	if swag.IsZero(m.RedirectToHTTPS) { // not required
		return nil
	}

	if m.RedirectToHTTPS != nil {
		if err := m.RedirectToHTTPS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirectToHttps")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2Frontend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2Frontend) UnmarshalBinary(b []byte) error {
	var res V2Frontend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V2FrontendLinkBackend This describes what backends to send traffic to. This can be expressed with a variety of filters such as matching on the hostname or the HTTP URL path.
//
// swagger:model V2FrontendLinkBackend
type V2FrontendLinkBackend struct {

	// This is default backend that is routed to if none of the other filters are matched.
	DefaultBackend string `json:"defaultBackend,omitempty"`

	// This is an optional field that specifies a mapping to various backends. These rules are applied in order.
	Map []*V2FrontendLinkBackendMapItems0 `json:"map"`
}

func (m *V2FrontendLinkBackend) UnmarshalJSON(b []byte) error {
	type V2FrontendLinkBackendAlias V2FrontendLinkBackend
	var t V2FrontendLinkBackendAlias
	if err := json.Unmarshal([]byte("{\"map\":[]}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V2FrontendLinkBackend(t)
	return nil
}

// Validate validates this v2 frontend link backend
func (m *V2FrontendLinkBackend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2FrontendLinkBackend) validateMap(formats strfmt.Registry) error {

	if swag.IsZero(m.Map) { // not required
		return nil
	}

	for i := 0; i < len(m.Map); i++ {
		if swag.IsZero(m.Map[i]) { // not required
			continue
		}

		if m.Map[i] != nil {
			if err := m.Map[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linkBackend" + "." + "map" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2FrontendLinkBackend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2FrontendLinkBackend) UnmarshalBinary(b []byte) error {
	var res V2FrontendLinkBackend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V2FrontendLinkBackendMapItems0 "backend" and at least one of the condition fields must be filled out. If multiple conditions are filled out they will be combined with a boolean "AND".
//
// swagger:model V2FrontendLinkBackendMapItems0
type V2FrontendLinkBackendMapItems0 struct {

	// backend
	Backend string `json:"backend,omitempty"`

	// All lowercase.
	HostEq string `json:"hostEq,omitempty"`

	// All lowercase. It is possible for a port (e.g. "foo.com:80") to be in this regex!
	HostReg string `json:"hostReg,omitempty"`

	// path beg
	PathBeg string `json:"pathBeg,omitempty"`

	// path end
	PathEnd string `json:"pathEnd,omitempty"`

	// path reg
	PathReg string `json:"pathReg,omitempty"`
}

// Validate validates this v2 frontend link backend map items0
func (m *V2FrontendLinkBackendMapItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2FrontendLinkBackendMapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2FrontendLinkBackendMapItems0) UnmarshalBinary(b []byte) error {
	var res V2FrontendLinkBackendMapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V2FrontendRedirectToHTTPS Setting this to the empty object is enough to redirect all traffic from HTTP (this frontend) to HTTPS (port 443).
//
// swagger:model V2FrontendRedirectToHTTPS
type V2FrontendRedirectToHTTPS struct {

	// One may additionally set a whitelist of fields that must be matched to allow HTTP.
	Except []*V2FrontendRedirectToHTTPSExceptItems0 `json:"except"`
}

func (m *V2FrontendRedirectToHTTPS) UnmarshalJSON(b []byte) error {
	type V2FrontendRedirectToHTTPSAlias V2FrontendRedirectToHTTPS
	var t V2FrontendRedirectToHTTPSAlias
	if err := json.Unmarshal([]byte("{\"except\":[]}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V2FrontendRedirectToHTTPS(t)
	return nil
}

// Validate validates this v2 frontend redirect to HTTPS
func (m *V2FrontendRedirectToHTTPS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExcept(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2FrontendRedirectToHTTPS) validateExcept(formats strfmt.Registry) error {

	if swag.IsZero(m.Except) { // not required
		return nil
	}

	for i := 0; i < len(m.Except); i++ {
		if swag.IsZero(m.Except[i]) { // not required
			continue
		}

		if m.Except[i] != nil {
			if err := m.Except[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("redirectToHttps" + "." + "except" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2FrontendRedirectToHTTPS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2FrontendRedirectToHTTPS) UnmarshalBinary(b []byte) error {
	var res V2FrontendRedirectToHTTPS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V2FrontendRedirectToHTTPSExceptItems0 Boolean AND will be applied with every selected value
//
// swagger:model V2FrontendRedirectToHTTPSExceptItems0
type V2FrontendRedirectToHTTPSExceptItems0 struct {

	// Match on host
	Host string `json:"host,omitempty"`

	// Match on path
	PathBeg string `json:"pathBeg,omitempty"`
}

// Validate validates this v2 frontend redirect to HTTPS except items0
func (m *V2FrontendRedirectToHTTPSExceptItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2FrontendRedirectToHTTPSExceptItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2FrontendRedirectToHTTPSExceptItems0) UnmarshalBinary(b []byte) error {
	var res V2FrontendRedirectToHTTPSExceptItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
