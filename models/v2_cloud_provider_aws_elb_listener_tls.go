// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2CloudProviderAwsElbListenerTLS A TLS configuration of AWS ELB listener.
//
// swagger:model V2CloudProviderAwsElbListenerTls
type V2CloudProviderAwsElbListenerTLS struct {

	// SSL server certificates referenced using ARNs.
	// Required: true
	// Max Items: 25
	// Min Items: 1
	Certificates []string `json:"certificates"`

	// SSL Security policy.
	// Required: true
	// Min Length: 1
	Policy *string `json:"policy"`
}

// Validate validates this v2 cloud provider aws elb listener Tls
func (m *V2CloudProviderAwsElbListenerTLS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2CloudProviderAwsElbListenerTLS) validateCertificates(formats strfmt.Registry) error {

	if err := validate.Required("certificates", "body", m.Certificates); err != nil {
		return err
	}

	iCertificatesSize := int64(len(m.Certificates))

	if err := validate.MinItems("certificates", "body", iCertificatesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("certificates", "body", iCertificatesSize, 25); err != nil {
		return err
	}

	for i := 0; i < len(m.Certificates); i++ {

		if err := validate.MinLength("certificates"+"."+strconv.Itoa(i), "body", string(m.Certificates[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *V2CloudProviderAwsElbListenerTLS) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy); err != nil {
		return err
	}

	if err := validate.MinLength("policy", "body", string(*m.Policy), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2CloudProviderAwsElbListenerTLS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2CloudProviderAwsElbListenerTLS) UnmarshalBinary(b []byte) error {
	var res V2CloudProviderAwsElbListenerTLS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
