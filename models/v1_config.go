// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Config * If a default is not set, then it will be left empty, even for objects. * Set defaults in the object that is furthest from the root object. * Always set a default for arrays. * The purpose of "x-nullable" is to allow the output JSON field to be set
//   to the golang "zero value". Without "x-nullable", the field will be
//   removed altogether from the resulting JSON.
// * Actual validation is done in the code, not expressed in swagger. * Since an empty boolean is interpreted as "false", don't set
//   a default.
// * CamelCase * Swagger will only do enum validation if it is a top level definition!
//
// swagger:model V1Config
type V1Config struct {

	// The array of pools.
	Pools []*V1Pool `json:"pools"`
}

func (m *V1Config) UnmarshalJSON(b []byte) error {
	type V1ConfigAlias V1Config
	var t V1ConfigAlias
	if err := json.Unmarshal([]byte("{\"pools\":[]}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = V1Config(t)
	return nil
}

// Validate validates this v1 config
func (m *V1Config) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePools(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Config) validatePools(formats strfmt.Registry) error {

	if swag.IsZero(m.Pools) { // not required
		return nil
	}

	for i := 0; i < len(m.Pools); i++ {
		if swag.IsZero(m.Pools[i]) { // not required
			continue
		}

		if m.Pools[i] != nil {
			if err := m.Pools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Config) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Config) UnmarshalBinary(b []byte) error {
	var res V1Config
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
