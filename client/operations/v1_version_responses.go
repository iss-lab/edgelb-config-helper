// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// V1VersionReader is a Reader for the V1Version structure.
type V1VersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1VersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1VersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewV1VersionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV1VersionOK creates a V1VersionOK with default headers values
func NewV1VersionOK() *V1VersionOK {
	return &V1VersionOK{}
}

/*V1VersionOK handles this case with default header values.

Version.
*/
type V1VersionOK struct {
	Payload string
}

func (o *V1VersionOK) Error() string {
	return fmt.Sprintf("[GET /v1/version][%d] v1VersionOK  %+v", 200, o.Payload)
}

func (o *V1VersionOK) GetPayload() string {
	return o.Payload
}

func (o *V1VersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1VersionDefault creates a V1VersionDefault with default headers values
func NewV1VersionDefault(code int) *V1VersionDefault {
	return &V1VersionDefault{
		_statusCode: code,
	}
}

/*V1VersionDefault handles this case with default header values.

Unexpected error.
*/
type V1VersionDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the v1 version default response
func (o *V1VersionDefault) Code() int {
	return o._statusCode
}

func (o *V1VersionDefault) Error() string {
	return fmt.Sprintf("[GET /v1/version][%d] V1Version default  %+v", o._statusCode, o.Payload)
}

func (o *V1VersionDefault) GetPayload() string {
	return o.Payload
}

func (o *V1VersionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
