// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// VersionReader is a Reader for the Version structure.
type VersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewVersionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVersionOK creates a VersionOK with default headers values
func NewVersionOK() *VersionOK {
	return &VersionOK{}
}

/*VersionOK handles this case with default header values.

Version.
*/
type VersionOK struct {
	Payload string
}

func (o *VersionOK) Error() string {
	return fmt.Sprintf("[GET /version][%d] versionOK  %+v", 200, o.Payload)
}

func (o *VersionOK) GetPayload() string {
	return o.Payload
}

func (o *VersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVersionDefault creates a VersionDefault with default headers values
func NewVersionDefault(code int) *VersionDefault {
	return &VersionDefault{
		_statusCode: code,
	}
}

/*VersionDefault handles this case with default header values.

Unexpected error.
*/
type VersionDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the version default response
func (o *VersionDefault) Code() int {
	return o._statusCode
}

func (o *VersionDefault) Error() string {
	return fmt.Sprintf("[GET /version][%d] Version default  %+v", o._statusCode, o.Payload)
}

func (o *VersionDefault) GetPayload() string {
	return o.Payload
}

func (o *VersionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
